// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: services/appmixer.proto

package appmixer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Appmixer_SayHello_FullMethodName      = "/appmixer.Appmixer/SayHello"
	Appmixer_SayHelloAgain_FullMethodName = "/appmixer.Appmixer/SayHelloAgain"
)

// AppmixerClient is the client API for Appmixer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppmixerClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error)
	// Sends another greeting
	SayHelloAgain(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error)
}

type appmixerClient struct {
	cc grpc.ClientConnInterface
}

func NewAppmixerClient(cc grpc.ClientConnInterface) AppmixerClient {
	return &appmixerClient{cc}
}

func (c *appmixerClient) SayHello(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, Appmixer_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appmixerClient) SayHelloAgain(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, Appmixer_SayHelloAgain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppmixerServer is the server API for Appmixer service.
// All implementations must embed UnimplementedAppmixerServer
// for forward compatibility
type AppmixerServer interface {
	// Sends a greeting
	SayHello(context.Context, *AppRequest) (*AppResponse, error)
	// Sends another greeting
	SayHelloAgain(context.Context, *AppRequest) (*AppResponse, error)
	mustEmbedUnimplementedAppmixerServer()
}

// UnimplementedAppmixerServer must be embedded to have forward compatible implementations.
type UnimplementedAppmixerServer struct {
}

func (UnimplementedAppmixerServer) SayHello(context.Context, *AppRequest) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedAppmixerServer) SayHelloAgain(context.Context, *AppRequest) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloAgain not implemented")
}
func (UnimplementedAppmixerServer) mustEmbedUnimplementedAppmixerServer() {}

// UnsafeAppmixerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppmixerServer will
// result in compilation errors.
type UnsafeAppmixerServer interface {
	mustEmbedUnimplementedAppmixerServer()
}

func RegisterAppmixerServer(s grpc.ServiceRegistrar, srv AppmixerServer) {
	s.RegisterService(&Appmixer_ServiceDesc, srv)
}

func _Appmixer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppmixerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appmixer_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppmixerServer).SayHello(ctx, req.(*AppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appmixer_SayHelloAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppmixerServer).SayHelloAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appmixer_SayHelloAgain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppmixerServer).SayHelloAgain(ctx, req.(*AppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Appmixer_ServiceDesc is the grpc.ServiceDesc for Appmixer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Appmixer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appmixer.Appmixer",
	HandlerType: (*AppmixerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Appmixer_SayHello_Handler,
		},
		{
			MethodName: "SayHelloAgain",
			Handler:    _Appmixer_SayHelloAgain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/appmixer.proto",
}
